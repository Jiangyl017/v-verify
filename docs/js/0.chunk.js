webpackJsonp([0],{326:function(s,n){s.exports={template:'<div class="markdown-body"><h3 id="-">安装</h3>\n<p><strong>v-verify</strong> 和其他的 <code>vue</code> 插件一样，使用 <code>Vue.use()</code> 方法注册。</p>\n<pre><code class="lang-javascript"><span class="hljs-keyword">import</span> Vue form <span class="hljs-string">\'vue\'</span>\n<span class="hljs-keyword">import</span> vverify from <span class="hljs-string">\'v-verify\'</span>\nVue.use(vverify, <span class="hljs-built_in">config</span>)\n</code></pre>\n<h3 id="-config-">配置（config）</h3>\n<p>考虑到验证场景的高度个性化，<strong>v-verify</strong> 提供了比较少的公共验证器，你可以在 <code>v-verify</code> 定义你自己的验证器，如果和公共验证器重复，自定义的验证器将会覆盖公共验证器。</p>\n<pre><code class="lang-javascript">Vue.use(vverify, {\n  <span class="hljs-attr">lang</span>: <span class="hljs-string">\'zh_cn\'</span>, <span class="hljs-comment">// 提示语言 默认 中文</span>\n  mode: <span class="hljs-string">\'insert\'</span> | <span class="hljs-string">\'tip\'</span>, <span class="hljs-comment">// v-verify 提供了 tip 和 insert 两种错误展示方式</span>\n  errorClass: <span class="hljs-string">\'\'</span>, <span class="hljs-comment">// 错误消息样式</span>\n  errorIcon: <span class="hljs-string">\'\'</span>, <span class="hljs-comment">// String 错误提示 icon 样式</span>\n  errorForm: <span class="hljs-string">\'\'</span>, <span class="hljs-comment">// 错误消息样式</span>\n  validators: { <span class="hljs-comment">// 自定义验证器</span>\n    email: <span class="hljs-built_in">RegExp</span>|[<span class="hljs-built_in">RegExp</span>, ...]|<span class="hljs-built_in">Function</span>,\n    ...\n  },\n  <span class="hljs-attr">messages</span>: { <span class="hljs-comment">// 验证器消息提示</span>\n    email: <span class="hljs-function">(<span class="hljs-params">filed</span>) =&gt;</span> <span class="hljs-string">`<span class="hljs-subst">${filed}</span>不符合指定邮箱格式`</span>, <span class="hljs-comment">// return 提示信息</span>\n    ...\n  }\n})\n</code></pre>\n<p>验证器定义支持三种形式</p>\n<ul>\n<li>正则表达式</li>\n<li>正则表达式列表</li>\n<li>函数，必须返回布尔值</li>\n</ul>\n<p>当自定义了验证器，你最好提供对应的验证提示消息</p>\n<table>\n<thead>\n<tr>\n<th>Config Name</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>lang</td>\n<td>zh_cn</td>\n<td>消息提示语言，有 <code>zh_cn</code> 和 ｀en_us｀ 两种选择，默认 <code>zh_cn</code></td>\n</tr>\n<tr>\n<td>mode</td>\n<td>insert</td>\n<td>消息提示展示方式，有 ｀insert｀ 和 ｀tip｀ 两种展示方式，默认以全局 config 为准，当指令 <code>v-verify</code> 中有指定，则指令覆盖全局 config 中配置。</td>\n</tr>\n<tr>\n<td>errorClass</td>\n<td>null</td>\n<td>消息提示的样式，如果为 null, 则为默认样式，当指令 <code>v-verify</code> 中有指定，则指令覆盖全局 config 中配置</td>\n</tr>\n<tr>\n<td>errorIcon</td>\n<td>null</td>\n<td>消息提示 <code>icon</code> 的样式，如果为 null, 则无icon，当指令 <code>v-verify</code> 中有指定，则指令覆盖全局 config 中配置</td>\n</tr>\n<tr>\n<td>errorForm</td>\n<td>null</td>\n<td>errorForm（className） 样式将添加到 <code>v-verify</code> 指令上到dom元素上，当指令 <code>v-verify</code> 中有指定，则指令覆盖全局 config 中配置｜</td>\n</tr>\n<tr>\n<td>validators</td>\n<td>null</td>\n<td>自定义验证器支持三种形式 <code>正则表达式</code> <code>正则表达式列表</code> <code>函数(必须返回布尔值)</code></td>\n</tr>\n<tr>\n<td>messages</td>\n<td>null</td>\n<td>自定义验证器验证消息，和 <code>validators</code> 一一对应关系</td>\n</tr>\n</tbody>\n</table>\n<h3 id="-">自定义验证器</h3>\n<p>比如你说你有一个需求只能接受以 <code>zing.com</code> 结尾的公司邮箱，你就可以这样自定义</p>\n<pre><code class="lang-javascript">Vue.use(vverify, {\n  <span class="hljs-attr">lang</span>: <span class="hljs-string">\'zh-cn\'</span>, <span class="hljs-comment">// 提示语言</span>\n  mode: <span class="hljs-string">\'insert\'</span>,\n  <span class="hljs-attr">errorClass</span>: <span class="hljs-string">\'example-error\'</span>,\n  <span class="hljs-attr">errorIcon</span>: <span class="hljs-string">\'icon-warn iconfont\'</span>,\n  <span class="hljs-attr">validators</span>: { <span class="hljs-comment">// 自定义验证器</span>\n    zing: <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> {\n      <span class="hljs-keyword">return</span> <span class="hljs-regexp">/^[a-zA-Z0-9_-]+@zing\\\\.com$/</span>.test(value)\n    },\n    ...\n  },\n  <span class="hljs-attr">messages</span>: { <span class="hljs-comment">// 验证器消息提示</span>\n    zing: <span class="hljs-function">(<span class="hljs-params">filed</span>) =&gt;</span> <span class="hljs-string">`<span class="hljs-subst">${filed}</span>必须以@zing.com结尾`</span>,\n    ...\n  }\n})\n</code></pre>\n<pre><code class="lang-html">&lt;<span class="hljs-selector-tag">input</span> class=<span class="hljs-string">"example-input"</span>\n       v-verify<span class="hljs-selector-class">.input</span><span class="hljs-selector-class">.blur</span>=<span class="hljs-string">"\'required|email|zing\'"</span>\n       placeholder=<span class="hljs-string">"YYYY-MM-DD"</span>/&gt;\n</code></pre>\n<p>如果有参数， 可以在 <code>value</code> 后面直接加参数, 然后用符号 <code>:</code> 传参</p>\n<pre><code class="lang-javascript">(<span class="hljs-keyword">value</span>, <span class="hljs-keyword">params</span>) =&gt; {\n  ...\n}\n</code></pre>\n<h3 id="-">使用</h3>\n<p><code>v-verify</code> 的使用非常简单, 它提供了最多5个选项但只有 <code>regs</code> 是必需的</p>\n<pre><code class="lang-html">&lt;<span class="hljs-built_in">input</span> class=<span class="hljs-string">"example-input"</span>\n       v-verify.<span class="hljs-built_in">input</span>.blur=<span class="hljs-comment">"{</span>\n         <span class="hljs-keyword">reg</span><span class="hljs-variable">s:</span> <span class="hljs-string">\'required|date\'</span>,\n         <span class="hljs-keyword">mode</span>: <span class="hljs-string">\'xxx\'</span>,\n         name: <span class="hljs-string">\'xxx\'</span>,\n         submi<span class="hljs-variable">t:</span> <span class="hljs-string">\'xxx\'</span>,\n         style: <span class="hljs-string">\'xxx\'</span>\n       }<span class="hljs-comment">"</span>\n       placeholder=<span class="hljs-string">"YYYY-MM-DD"</span>/&gt;\n</code></pre>\n<p>其中修饰符 <code>input</code> 和 <code>blur</code> 是 v-verify 提供的验证触发时机， 当指令 <code>v-verify</code> 加在 <code>vue</code> 组件上时，不需要添加\b触发时机修饰符， 但是必需要有 <code>v-model</code> 指令。</p>\n<table>\n<thead>\n<tr>\n<th>Param Name</th>\n<th>Required</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>regs</td>\n<td>是</td>\n<td>验证器列表 以符号 竖号 分隔</td>\n</tr>\n<tr>\n<td>mode</td>\n<td>否</td>\n<td>验证消息提示，将覆盖全局配置</td>\n</tr>\n<tr>\n<td>name</td>\n<td>否</td>\n<td>字段名称，会展示在验证消息中</td>\n</tr>\n<tr>\n<td>submit</td>\n<td>否</td>\n<td>当需要在提交到服务器前进行二次验证，必需要有submit属性，它的作用相当于标示验证器，具体看<a href="https://joinyi.github.io/v-verify/#/submit">文档</a></td>\n</tr>\n<tr>\n<td>style</td>\n<td>否</td>\n<td>将覆盖 全局 errorForm 配置</td>\n</tr>\n</tbody>\n</table>\n<p>好了， 是不是很简单。快去看<a href="https://joinyi.github.io/v-verify/#/basic">基本用例</a>吧</p>\n</div>'}}});
//# sourceMappingURL=0.chunk.js.map